-- run_string log("----->"..tostring(xr_statistic.actor_statistic.best_monster).." "..tostring(xr_statistic.actor_statistic.best_monster_rank))
actor_statistic = {
					surges = 0,
					completed_quests = 0,
					killed_monsters = 0,
					killed_stalkers = 0,
					founded_secrets = 0,
					artefacts_founded = 0,
					best_monster = nil,
					favorite_weapon_sect = nil,
					best_monster_rank = 0,
					}

monster_classes = {
			[clsid.bloodsucker_s] 	  = "bloodsucker",
			[clsid.boar_s] 			  = "boar",
			[clsid.burer_s] 		  = "burer",
			[clsid.chimera_s] 		  = "chimera",
			[clsid.controller_s] 	  = "controller",
			[clsid.dog_s] 			  = "dog",
			[clsid.flesh_s] 		  = "flesh",
			[clsid.gigant_s] 		  = "gigant",
			[clsid.poltergeist_s] 	  = "poltergeist",
			[clsid.psy_dog_s] 		  = "psy_dog",
			[clsid.pseudodog_s]		  = "pseudodog",
			[clsid.snork_s ] 		  = "snork",
			[clsid.tushkano_s ] 	  = "tushkano",
		}

weapons_table = {
									abakan			= 0,
									ak74			= 0,
									ak74u			= 0,
									beretta			= 0,
									bm16			= 0,
									colt1911		= 0,
									desert			= 0,
									f1				= 0,
									fn2000			= 0,
									fort			= 0,
									g36				= 0,
									gauss			= 0,
									groza			= 0,
									hpsa			= 0,
									knife			= 0,
									l85				= 0,
									lr300			= 0,
									mp5				= 0,
									pb				= 0,
									pkm				= 0,
									pm				= 0,
									protecta		= 0,
									rg				= 0,
									rgd5			= 0,
									rpg7			= 0,
									sig220			= 0,
									sig550			= 0,
									spas12			= 0,
									svd				= 0,
									svu				= 0,
									toz34			= 0,
									usp45			= 0,
									val				= 0,
									vintorez		= 0,
									walther			= 0,
									wincheaster1300	= 0,
				}

artefacts_table = {
	af_cristall = false,
	af_blood = false,
	af_electra_sparkler = false,
	af_cristall_flower = false,
	af_medusa = false,
	af_fireball = false,
	af_mincer_meat = false,
	af_electra_flash = false,
	af_night_star = false,
	af_dummy_glassbeads = false,
	af_soul = false,
	af_electra_moonlight = false,
	af_dummy_battery = false,
	af_vyvert = false,
	af_fuzz_kolobok = false,
	af_gravi = false,
	af_eye = false,
	af_baloon = false,
	af_dummy_dummy = false,
	af_gold_fish = false,
	af_fire = false,
	af_glass = false,
	af_ice = false,
}

taken_artefacts = {}

function inc_surges_counter()
	actor_statistic.surges = actor_statistic.surges + 1
end
function inc_completed_quests_counter()
	actor_statistic.completed_quests = actor_statistic.completed_quests + 1
end
function inc_killed_monsters_counter()
	actor_statistic.killed_monsters = actor_statistic.killed_monsters + 1
end
function inc_killed_stalkers_counter()
	actor_statistic.killed_stalkers = actor_statistic.killed_stalkers + 1
end
function inc_founded_artefacts_counter(art_id)
	if(taken_artefacts[art_id]==nil) then
			actor_statistic.artefacts_founded = actor_statistic.artefacts_founded + 1
		taken_artefacts[art_id] = art_id
		local s_art = alife():object(art_id)
			if(s_art and s_art:section_name()) then
					artefacts_table[s_art:section_name()] = true
			end
	end
end
function inc_founded_secrets_counter()
	actor_statistic.founded_secrets = actor_statistic.founded_secrets + 1
end

function set_best_monster(obj)
	if IsStalker(obj) then
--		actor_statistic.best_monster = "stalker"
	else
		local community = monster_classes[get_clsid(obj)]
		if not(community) then
			abort("Statistic ERROR: cannot find monster class for [%s] clsid [%s]", obj:name(), tostring(get_clsid(obj)))
		end
		local s_obj = alife():object(obj:id())
		if(s_obj) then
			local rank = s_obj:rank()
			if(community=="flesh") then
				if(rank==3) then
					community = community.."_strong"
				else
					community = community.."_weak"
				end
			elseif(community=="poltergeist") then
				if(rank==12) then
					community = community.."_flame"
				else
					community = community.."_tele"
				end
			elseif(community=="boar") then
				if(rank==6) then
					community = community.."_strong"
				else
					community = community.."_weak"
				end
			elseif(community=="pseudodog" or community=="psy_dog") then
				if(rank==13) then
					community = community.."_strong"
				else
					community = community.."_weak"
				end
			elseif(community=="bloodsucker") then
				if(rank==16) then
					community = community.."_strong"
				elseif(rank==15) then
					community = community.."_normal"
				else
					community = community.."_weak"
				end
			end
			if(rank>actor_statistic.best_monster_rank) then
				actor_statistic.best_monster_rank = rank
				actor_statistic.best_monster = community
			end
		end
	end
end

function set_best_weapon(hit_amount)
	local active_item = db.actor:active_item()
	if(active_item) then
		local s_obj = alife():object(active_item:id())
		if(s_obj) then
			local s = s_obj:section_name()
			for w in string.gfind(s, "%w+") do
				if(weapons_table[w]~=nil) then
					weapons_table[w] = weapons_table[w] + hit_amount
				end
			end
		end
		local amount = 0
		for k,v in pairs(weapons_table) do
			if(v>amount) then
				amount = v
				if(k=="rgd5" or k=="f1") then
					actor_statistic.favorite_weapon_sect = "grenade_"..k
				else
					actor_statistic.favorite_weapon_sect = "wpn_"..k
				end
				if(k=="desert") then
					actor_statistic.favorite_weapon_sect = "wpn_desert_eagle"
				elseif(k=="rg") then
					actor_statistic.favorite_weapon_sect = "wpn_rg-6"
				end
			end
		end
	end
end

function save(package)
	package:w_u16(actor_statistic.surges)
	package:w_u16(actor_statistic.completed_quests)
	package:w_u32(actor_statistic.killed_monsters)
	package:w_u32(actor_statistic.killed_stalkers)
	package:w_u16(actor_statistic.founded_secrets)
	package:w_u16(actor_statistic.artefacts_founded)
	package:w_u32(actor_statistic.best_monster_rank)
	package:w_stringZ(tostring(actor_statistic.best_monster))
	package:w_stringZ(tostring(actor_statistic.favorite_weapon_sect))
	local i = 0
	for k,v in pairs(weapons_table) do
		i = i + 1
	end
	package:w_u8(i)
	for k,v in pairs(weapons_table) do
		package:w_stringZ(tostring(k))
		package:w_float(v)
	end
	i = 0
	for k,v in pairs(artefacts_table) do
		i = i + 1
	end
	package:w_u8(i)
	for k,v in pairs(artefacts_table) do
		package:w_stringZ(tostring(k))
		package:w_bool(v)
	end
	i = 0
	for k,v in pairs(taken_artefacts) do
		i = i + 1
	end
	package:w_u8(i)
	for k,v in pairs(taken_artefacts) do
		package:w_u32(k)
	end
end

function load(package)
	actor_statistic = {}
	actor_statistic.surges  			= package:r_u16()
	actor_statistic.completed_quests 	= package:r_u16()
	actor_statistic.killed_monsters  	= package:r_u32()
	actor_statistic.killed_stalkers  	= package:r_u32()
	actor_statistic.founded_secrets  	= package:r_u16()
	actor_statistic.artefacts_founded	= package:r_u16()
	actor_statistic.best_monster_rank 	= package:r_u32()
	local str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.best_monster = str
	end
	str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.favorite_weapon_sect = str
	end
	weapons_table = {}
	local n = package:r_u8()
	for i = 1,n do
		local k = package:r_stringZ()
		local v = package:r_float()
		weapons_table[k] = v
	end
	artefacts_table = {}
	n = package:r_u8()
	for i = 1,n do
		log("n "..tostring(n))
		local k = package:r_stringZ()
		local v = package:r_bool()
		artefacts_table[k] = v
	end

		taken_artefacts = {}
	n = package:r_u8()
	for i = 1,n do
		local k = package:r_u32()
		taken_artefacts[k] = k
	end
end

function philosophy_functor()
	if not has_alife_info("philosophy_achievement_gained") then
		if has_alife_info("stalker_victor_end") then
			db.actor:give_info_portion("philosophy_achievement_gained")
			--news_manager.send_tip(db.actor, "st_ach_philosophy", nil, "philosophy", nil, nil)
			news_manager.send_tip_new("st_get_achievement", "st_philosophy_name", "get_achievement", nil)
		end
	end
	return has_alife_info("philosophy_achievement_gained")
end
